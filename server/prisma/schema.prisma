generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum QuestionType {
    SHORT_TEXT
    LONG_TEXT
    INTEGER
    CHECKBOX
    SINGLE_CHOICE
    IMAGE
}
enum AccountType {
  BASIC
  BUSINESS
  PREMIUM
}

enum Topic {
  TECHNOLOGY
  HEALTH
  EDUCATION
  BUSINESS
  ENTERTAINMENT
  SCIENCE
  LIFESTYLE
  ENVIRONMENT
  POLITICS
  TRAVEL
  CULTURE
  PERSONAL
  RELATIONSHIPS
  MARKETING
  PRODUCTIVITY
  FINANCE
  FOOD
  SPORT
  PSYCHOLOGY
  OTHER
}

model CompanyAccount {
  id        String     @id @default(uuid())
  type      AccountType
  ownerId   String     @unique
  owner     User       @relation("OwnedCompany", fields: [ownerId], references: [id])
  users     User[]     @relation("CompanyMembers")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id            String           @id @default(uuid())
  nickname      String
  email         String           @unique
  password      String
  isAdmin       Boolean          @default(false)
  isBlocked     Boolean          @default(false)
  companyId     String?
  company       CompanyAccount?  @relation("CompanyMembers", fields: [companyId], references: [id])
  ownedCompany  CompanyAccount?  @relation("OwnedCompany")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  templates     Template[]       @relation("AuthorTemplates")
  forms         Form[]
  comments      Comment[]
  likes         Like[]
  @@index([email])
}

model Template {
  id          String      @id @default(uuid())
  title       String
  description String
  topic       Topic
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  author      User        @relation("AuthorTemplates", fields: [authorId], references: [id], onDelete: Cascade)
  isPublic    Boolean     @default(true)
  questions   Question[]
  comments    Comment[]
  likes       Like[]
  forms       Form[]
  tags        Tag[]       @relation("TemplateTags")
  @@index([createdAt])
  @@index([isPublic])
  @@index([authorId])
  @@index([title])
  @@index([topic])
}

model Tag {
  id          String      @id @default(uuid())
  name        String      @unique
  templates   Template[]  @relation("TemplateTags")
}

model Question {
  id          String      @id @default(uuid())
  templateId  String
  template    Template    @relation(fields: [templateId], references: [id], onDelete: Cascade)
  text        String
  type        QuestionType
  order       Int
  required    Boolean     @default(false)
  updatedAt   DateTime    @updatedAt
  answers     Answer[]
  options     String[]    @default([])
  imageUrl    String?
}

model Form {
  id          String      @id @default(uuid())
  templateId  String
  template    Template    @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  answers     Answer[]
  emailSent   Boolean     @default(false)
}

model Answer {
  id          String      @id @default(uuid())
  formId      String
  form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  questionId  String
  question    Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  value       Json
}

model Comment {
  id          String      @id @default(uuid())
  templateId  String
  template    Template    @relation(fields: [templateId], references: [id], onDelete: Cascade)
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  text        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Like {
  id          String      @id @default(uuid())
  templateId  String
  template    Template    @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
}
